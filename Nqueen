#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Solution {
public:
    bool isSafe(vector<string> &board, int row, int col) {
        int i = row, j = col;
        
        // Check for left
        while (j >= 0) {
            if (board[i][j] == 'Q')
                return false;
            j--;
        }

        // Check for upper left diagonal
        i = row, j = col;
        while (i >= 0 && j >= 0) {
            if (board[i][j] == 'Q')
                return false;
            i--;
            j--;
        }

        // Check for lower left diagonal
        i = row, j = col;
        while (i < board.size() && j >= 0) {
            if (board[i][j] == 'Q')
                return false;
            i++;
            j--;
        }
        return true;
    }

    bool solve(vector<string> &board, int col, int n) {
        if (col == n) {
            return true; // Solution found
        }

        for (int row = 0; row < n; row++) {
            if (isSafe(board, row, col)) {
                board[row][col] = 'Q';
                if (solve(board, col + 1, n)) {
                    return true; // Stop after finding the first solution
                }
                board[row][col] = '.'; // Backtrack
            }
        }
        return false;
    }

    vector<string> generateNQueensMatrix(int n) {
        if (n == 2 || n == 3) {
            // No solution exists for n = 2 or n = 3
            return {};
        }
        
        vector<string> board(n, string(n, '.'));

        // Place the first Queen at a specific starting position, e.g., (0, 0)
        board[0][0] = 'Q';

        // Use backtracking to place the remaining queens
        if (!solve(board, 1, n)) {
            return {}; // Return empty if no solution is found
        }

        return board;
    }
};

int main() {
    int n;
    cout << "Enter the value of n for the N-Queens problem: ";
    cin >> n;

    if (n < 1) {
        cout << "Invalid input. n must be greater than or equal to 1." << endl;
        return 0;
    }

    Solution solution;
    vector<string> result = solution.generateNQueensMatrix(n);

    if (result.empty()) {
        cout << "No solution exists for the " << n << "-Queens problem." << endl;
    } else {
        cout << "One possible solution for the " << n << "-Queens matrix is:" << endl;
        for (const string &row : result) {
            cout << row << endl;
        }
        // for(char i = 0 ; i < result.size() ; i++){
        //         cout<<result[i];
        // }
    }

    return 0;
}
