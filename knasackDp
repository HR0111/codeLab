#include <iostream>
#include <vector>
using namespace std;

// Function to solve 0-1 Knapsack Problem using Dynamic Programming
int knapsack(int capacity, const vector<int>& weights, const vector<int>& values, int n) {
    vector<vector<int>> dp(n + 1, vector<int>(capacity + 1, 0));

    // Build the DP table
    for (int i = 1; i <= n; i++) {
        for (int w = 1; w <= capacity; w++) {
            if (weights[i - 1] <= w) {
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    return dp[n][capacity];  // The maximum value for the given capacity and items
}

int main() {
    int n, capacity;
    
    // User input for number of items and knapsack capacity
    cout << "Enter the number of items: ";
    cin >> n;
    cout << "Enter the capacity of the knapsack: ";
    cin >> capacity;

    vector<int> weights(n), values(n);

    // User input for each item's weight and value
    for (int i = 0; i < n; i++) {
        cout << "Enter weight and value for item " << i + 1 << ": ";
        cin >> weights[i] >> values[i];
    }

    // Calculate and display the maximum value that can be achieved
    int maxValue = knapsack(capacity, weights, values, n);
    cout << "Maximum value in the knapsack: " << maxValue << endl;

    return 0;
}

// Enter the number of items: 3
// Enter the capacity of the knapsack: 50
// Enter weight and value for item 1: 10 60
// Enter weight and value for item 2: 20 100
// Enter weight and value for item 3: 30 120
